What is Inversion of Control and Dependency Injection?

Consider a scenario an Application needs to talk to a coach to get Daily workouts,
This App should be configurable for all different type of games.


Class File 1:
--------------
interface Coach {
public String getDailyWorkout();
}

Class File 2:
------------
Class Baseball() implements Coach{

@Override
public String getDailyWorkout(){
return "practice baseball daily for 30 mins";
}

}

Class File 3:
------------
Class Athlete() implements Coach{

@Override
public String getDailyWorkout(){
return "run 5k daily";
}

}

Main class file
--------------

public class MainClass{

public static void main(String[] args){
// create the object 
Coach the_coach  = new Baseball();      :: hardcoded Object Creation

//call the method
System.out.println(the_coach.getDailyWorkout());

}


}



Since our App Should be Configurable , Spring supports Object creation and Manage dependencies by use of Object factory.

MyApp ------give me coach Object--------->  Object Factory
                                                 ----------------> Configuration file  ------   Cricket 
                                                                      |         \
                                                                      |           \
                                                                      |             \
                                                                  BaseBall        Hockey 
                                                                  
                                                               
 Spring Container can be configured in 3 different ways
 1) XML configuration
 2) Java Annotations
 3) Java Source code
 
 
primary feature of Spring core Container 
1) create and manage Objects  (IOC)
2) Inject Object Dependencies (DI)


Inversion of Control:

1) Configure Spring Beans
2) Create a Spring Container
3) Retrieve Beans from Spring Container


  1) Configuring Spring Beans
      File : ApplicationContext.xml
      <beans>
            <bean id ="" class="">
            </bean>        
            
      </beans>



    2) creating a Spring Container:  ApplicationContext
     Spring Container can be created in multiple ways:
     1) ClassPathXmlApplicationContext
     2)AnnotationCOnfigApplicationContext
     3)GenericWebApplicationContext
     
     
     ClassPathApplicationContext context = new ClassPathApplicationContext("ApplicationContext.xml")
     
     
     3) Retrieve beans from container:
     context.getBean() 
     
     
     
     ALL 3 steps now:
     ----------------
     
     ClassPathApplicationContext context = new ClassPathApplicationContext("ApplicationContext.xml")
     Coach the_Coach = context.getBean("mycoach", Coach.class)     // "mycoach" refers to bean id , Coach.class is an interface, BaseballCoach is the implemeted class
          
                   <beans>    <bean id ="mycoach" class="fullpackage.baseballcoach"></bean>    </beans>           
                   context.getbean() method 2nd param should be an interface like Coach in our example
                   Coach theCoach =  means we are using interface to create a object of required coach type.
                   
                   
   What is Dependency Injection?
   
   if one service want s to utilize the another Service, then this needs to be injected during the object creation. ex: fortune Service inteface , a class is used in sportcalss.
   
   There are 2 types of DI
   
   1) Constructor Injection
   2)Setter Injection
   
   Autowiring will take later ... while doing config with Annotations
   
   
   Steps involved:
   
   1)Define the dependency interface and class (similar to coach and sportclass)
   2) create a constructor in Sportclass for injection
   3)Configure Dependency injection in Config file
   
   
Create a private field , create a constructor & in the config file 
<constructor-arg  ref="">  only ref is present in const -arg


Setter Injection:
-----------------

1) create a private field on your class and create a setter method for the field
2) create the beans and configure it in Spring config file using <property> tag
    <properties name ="" ref =""> //name is coming from setter method , ref ="" value is setter method name;
    
    
Reading Literal Values:
-------------------------

Create private fields
create setter method for fields
create <property name ="" value =""> in the spring configuration file

Reading Property File :
---------------------------
<context: property-placeholder location ="classpath:sport.properties">
create <property name ="" value ="${RCB}">

use @value("${}") => during property place holder

@propertySource("classpath:filename");

I am running the code for Java Configuration and injecting values from props file. However, I'm getting:
${foo.email}
${foo.team}

If you are using Spring 4.2 and lower, you will need to add the code

    @Bean
    public static PropertySourcesPlaceholderConfigurer
                    propertySourcesPlaceHolderConfigurer() {
        
        return new PropertySourcesPlaceholderConfigurer();
    }



IOC with JAVA ANNOTATIONS:
--------------------------

In spring configuration file:

ApplicationConfiguration.xml

<context : component-scan base-package="">

this will enable creating objects with Annotations 

@ComponentScan("beanid")  called in context.getbean("beanid", coach.class)

default bean id is the classname with firstletter lowercase

---------------------------------------------------------------

IOC and DI with Java Source code:
---------------------------------

1) create a java configuration class using @configuration annotation
2) create the bean objects required in the project in the config class using @Bean annotation
3) use AnnotationCOnfigApplicationContext as the Spring container
4) retrieve the bean as before using context.getBean()


--------------------------------------------------- ----------


@Configuration
@ComponentScanning("base package")
public class ApplicationCongigurationclass{



@Bean
public Coach footballCOach(){
return new FootballCoach();
}

}


class MainClass(){

public Static void Main(String[] args){


AnnotationConfig ApplicationContext context = new AnnotationconfigApplicationContext(ApplicationCongigurationclass.class);

context.getbean("footballCoach");  // beanID is the bean method name defined with @bean annotation
}
}





           
           
   
      
     
     
                                                                    
                                                                    
                                                                    
                                                                    

