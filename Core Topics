What is Inversion of Control and Dependency Injection?

Consider a scenario an Application needs to talk to a coach to get Daily workouts,
This App should be configurable for all different type of games.


Class File 1:
--------------
interface Coach {
public String getDailyWorkout();
}

Class File 2:
------------
Class Baseball() implements Coach{

@Override
public String getDailyWorkout(){
return "practice baseball daily for 30 mins";
}

}

Class File 3:
------------
Class Athlete() implements Coach{

@Override
public String getDailyWorkout(){
return "run 5k daily";
}

}

Main class file
--------------

public class MainClass{

public static void main(String[] args){
// create the object 
Coach the_coach  = new Baseball();      :: hardcoded Object Creation

//call the method
System.out.println(the_coach.getDailyWorkout());

}


}



Since our App Should be Configurable , Spring supports Object creation and Manage dependencies by use of Object factory.

MyApp ------give me coach Object--------->  Object Factory
                                                 ----------------> Configuration file  ------   Cricket 
                                                                      |         \
                                                                      |           \
                                                                      |             \
                                                                  BaseBall        Hockey 
                                                                  
                                                               
 Spring Container can be configured in 3 different ways
 1) XML configuration
 2) Java Annotations
 3) Java Source code
 
 
primary feature of Spring core Container 
1) create and manage Objects  (IOC)
2) Inject Object Dependencies (DI)


Inversion of Control:

1) Configure Spring Beans
2) Create a Spring Container
3) Retrieve Beans from Spring Container


  1) Configuring Spring Beans
      File : ApplicationContext.xml
      <beans>
            <bean id ="" class="">
            </bean>        
            
      </beans>



    2) creating a Spring Container:  ApplicationContext
     Spring Container can be created in multiple ways:
     1) ClassPathXmlApplicationContext
     2)AnnotationCOnfigApplicationContext
     3)GenericWebApplicationContext
     
     
     ClassPathApplicationContext context = new ClassPathApplicationContext("ApplicationContext.xml")
     
     
     3) Retrieve beans from container:
     context.getBean() 
     
     
     
     ALL 3 steps now:
     ----------------
     
     ClassPathApplicationContext context = new ClassPathApplicationContext("ApplicationContext.xml")
     Coach the_Coach = context.getBean("mycoach", Coach.class)     // "mycoach" refers to bean id , Coach.class is an interface, BaseballCoach is the implemeted class
          
                   <beans>    <bean id ="mycoach" class="fullpackage.baseballcoach"></bean>    </beans>           
                   context.getbean() method 2nd param should be an interface like Coach in our example
                   Coach theCoach =  means we are using interface to create a object of required coach type.
                   
                   
                   
           
           
           
   
      
     
     
                                                                    
                                                                    
                                                                    
                                                                    

